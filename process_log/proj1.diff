diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index bbfc6d440870..ebd13502d597 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -345,6 +345,9 @@
 334	common	rseq			__x64_sys_rseq
 424	common	pidfd_send_signal	__x64_sys_pidfd_send_signal
 434	common	pidfd_open		__x64_sys_pidfd_open
+435	common	get_proc_log		__x64_sys_get_proc_log
+436	common	set_proc_log		__x64_sys_set_proc_log
+437	common	proc_message		__x64_sys_proc_message
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/include/linux/printk.h b/include/linux/printk.h
index cf3eccfe1543..c98626444c62 100644
--- a/include/linux/printk.h
+++ b/include/linux/printk.h
@@ -62,6 +62,7 @@ static inline const char *printk_skip_headers(const char *buffer)
 
 extern int console_printk[];
 
+#define process_loglevel (console_printk[0])
 #define console_loglevel (console_printk[0])
 #define default_message_loglevel (console_printk[1])
 #define minimum_console_loglevel (console_printk[2])
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 8e5b2c6d5dea..60cc78cc705b 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1297,4 +1297,10 @@ static inline unsigned int ksys_personality(unsigned int personality)
 	return old;
 }
 
+asmlinkage long sys_get_proc_log(void);
+
+asmlinkage long sys_set_proc_log(int level);
+
+asmlinkage long sys_proc_message(char* msg, int level);
+
 #endif
diff --git a/init/main.c b/init/main.c
index 02f6b6bd6a17..c5c2900d0992 100644
--- a/init/main.c
+++ b/init/main.c
@@ -213,12 +213,14 @@ EXPORT_SYMBOL(loops_per_jiffy);
 static int __init debug_kernel(char *str)
 {
 	console_loglevel = CONSOLE_LOGLEVEL_DEBUG;
+	process_loglevel = CONSOLE_LOGLEVEL_DEBUG;
 	return 0;
 }
 
 static int __init quiet_kernel(char *str)
 {
 	console_loglevel = CONSOLE_LOGLEVEL_QUIET;
+	process_loglevel = CONSOLE_LOGLEVEL_QUIET;
 	return 0;
 }
 
@@ -236,6 +238,7 @@ static int __init loglevel(char *str)
 	 */
 	if (get_option(&str, &newlevel)) {
 		console_loglevel = newlevel;
+		process_loglevel = newlevel;
 		return 0;
 	}
 
diff --git a/kernel/sys.c b/kernel/sys.c
index 0a1cdee858de..b3d264b0826b 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -2806,4 +2806,65 @@ COMPAT_SYSCALL_DEFINE1(sysinfo, struct compat_sysinfo __user *, info)
 
 	return 0;
 }
+
+SYSCALL_DEFINE0(get_proc_log) {
+	return process_loglevel;
+}
+
+SYSCALL_DEFINE1(set_proc_log, int, level) {
+	uid_t id = from_kuid_munged(current_user_ns(), current_euid());
+	if (id == 0) {
+		if (level >= 0 && level <= 7) {
+			process_loglevel = level;
+			return level;
+		}
+	}
+	return -1;
+}
+
+SYSCALL_DEFINE2(proc_message, char*, message, int, level) {
+	char* arr[] = {"PROC_OVERRIDE", "PROC_ALERT", "PROC_CRITICAL", "PROC_ERROR", "PROC_WARNING", "PROC_NOTICE", "PROC_INFO", "PROC_DEBUG"};
+	int proc_lev = process_loglevel;
+	if (level > 7 || level < 0) {
+		return -1;
+	}
+	else if (proc_lev >= level) {
+		pid_t proc_id = task_tgid_vnr(current);
+		char* executable_name = current->comm;
+		switch(level) {
+			case 0 :
+				pr_emerg("%s [%s, %d]: %s", arr[level], executable_name, proc_id, message);
+				break;
+			case 1 :
+				pr_alert("%s [%s, %d]: %s", arr[level], executable_name, proc_id, message);
+				break;
+			case 2 :
+				pr_crit("%s [%s, %d]: %s", arr[level], executable_name, proc_id, message);
+				break;
+			case 3 :
+				pr_err("%s [%s, %d]: %s", arr[level], executable_name, proc_id, message);
+				break;
+			case 4 :
+				pr_warn("%s [%s, %d]: %s", arr[level], executable_name, proc_id, message);
+				break;
+			case 5 :
+				pr_notice("%s [%s, %d]: %s", arr[level], executable_name, proc_id, message);
+				break;
+			case 6 :
+				pr_info("%s [%s, %d]: %s", arr[level], executable_name, proc_id, message);
+				break;
+			case 7 :
+				pr_debug("%s [%s, %d]: %s", arr[level], executable_name, proc_id, message);
+				break;
+		}
+		return level;
+		//pr_emerg("hey is thing on?????");*/
+		//pr_emerg("%s", arr[level]);
+		//printk("<%d>\n%s [%s, %d]: %s\n", level, arr[level], executable_name, proc_id, message);
+	}
+	else {
+		return level;
+	}
+	return level;
+}
 #endif /* CONFIG_COMPAT */
